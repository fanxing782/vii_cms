/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../pages/__root';
import { Route as RedirectRouteImport } from './../pages/redirect';
import { Route as InstallRouteRouteImport } from './../pages/install/route';
import { Route as IndexRouteImport } from './../pages/index';
import { Route as InstallIndexRouteImport } from './../pages/install/index';
import { Route as InstallStepRouteImport } from './../pages/install/$step';
import { Route as AuthLoginRouteImport } from './../pages/_auth/login';
import { Route as LayoutWebRouteRouteImport } from './../pages/_layout/web/route';
import { Route as LayoutWebIndexRouteImport } from './../pages/_layout/web/index';
import { Route as LayoutWebNotFoundRouteImport } from './../pages/_layout/web/$not-found';
import { Route as LayoutWebRoute2RouteRouteImport } from './../pages/_layout/web/route2/route';
import { Route as LayoutWebRoute1RouteRouteImport } from './../pages/_layout/web/route1/route';

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any);
const InstallRouteRoute = InstallRouteRouteImport.update({
  id: '/install',
  path: '/install',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const InstallIndexRoute = InstallIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => InstallRouteRoute,
} as any);
const InstallStepRoute = InstallStepRouteImport.update({
  id: '/$step',
  path: '/$step',
  getParentRoute: () => InstallRouteRoute,
} as any);
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutWebRouteRoute = LayoutWebRouteRouteImport.update({
  id: '/_layout/web',
  path: '/web',
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutWebIndexRoute = LayoutWebIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutWebRouteRoute,
} as any);
const LayoutWebNotFoundRoute = LayoutWebNotFoundRouteImport.update({
  id: '/$not-found',
  path: '/$not-found',
  getParentRoute: () => LayoutWebRouteRoute,
} as any);
const LayoutWebRoute2RouteRoute = LayoutWebRoute2RouteRouteImport.update({
  id: '/route2',
  path: '/route2',
  getParentRoute: () => LayoutWebRouteRoute,
} as any);
const LayoutWebRoute1RouteRoute = LayoutWebRoute1RouteRouteImport.update({
  id: '/route1',
  path: '/route1',
  getParentRoute: () => LayoutWebRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/install': typeof InstallRouteRouteWithChildren;
  '/redirect': typeof RedirectRoute;
  '/web': typeof LayoutWebRouteRouteWithChildren;
  '/login': typeof AuthLoginRoute;
  '/install/$step': typeof InstallStepRoute;
  '/install/': typeof InstallIndexRoute;
  '/web/route1': typeof LayoutWebRoute1RouteRoute;
  '/web/route2': typeof LayoutWebRoute2RouteRoute;
  '/web/$not-found': typeof LayoutWebNotFoundRoute;
  '/web/': typeof LayoutWebIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/redirect': typeof RedirectRoute;
  '/login': typeof AuthLoginRoute;
  '/install/$step': typeof InstallStepRoute;
  '/install': typeof InstallIndexRoute;
  '/web/route1': typeof LayoutWebRoute1RouteRoute;
  '/web/route2': typeof LayoutWebRoute2RouteRoute;
  '/web/$not-found': typeof LayoutWebNotFoundRoute;
  '/web': typeof LayoutWebIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/install': typeof InstallRouteRouteWithChildren;
  '/redirect': typeof RedirectRoute;
  '/_layout/web': typeof LayoutWebRouteRouteWithChildren;
  '/_auth/login': typeof AuthLoginRoute;
  '/install/$step': typeof InstallStepRoute;
  '/install/': typeof InstallIndexRoute;
  '/_layout/web/route1': typeof LayoutWebRoute1RouteRoute;
  '/_layout/web/route2': typeof LayoutWebRoute2RouteRoute;
  '/_layout/web/$not-found': typeof LayoutWebNotFoundRoute;
  '/_layout/web/': typeof LayoutWebIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/install'
    | '/redirect'
    | '/web'
    | '/login'
    | '/install/$step'
    | '/install/'
    | '/web/route1'
    | '/web/route2'
    | '/web/$not-found'
    | '/web/';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/redirect'
    | '/login'
    | '/install/$step'
    | '/install'
    | '/web/route1'
    | '/web/route2'
    | '/web/$not-found'
    | '/web';
  id:
    | '__root__'
    | '/'
    | '/install'
    | '/redirect'
    | '/_layout/web'
    | '/_auth/login'
    | '/install/$step'
    | '/install/'
    | '/_layout/web/route1'
    | '/_layout/web/route2'
    | '/_layout/web/$not-found'
    | '/_layout/web/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  InstallRouteRoute: typeof InstallRouteRouteWithChildren;
  RedirectRoute: typeof RedirectRoute;
  LayoutWebRouteRoute: typeof LayoutWebRouteRouteWithChildren;
  AuthLoginRoute: typeof AuthLoginRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect';
      path: '/redirect';
      fullPath: '/redirect';
      preLoaderRoute: typeof RedirectRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/install': {
      id: '/install';
      path: '/install';
      fullPath: '/install';
      preLoaderRoute: typeof InstallRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/install/': {
      id: '/install/';
      path: '/';
      fullPath: '/install/';
      preLoaderRoute: typeof InstallIndexRouteImport;
      parentRoute: typeof InstallRouteRoute;
    };
    '/install/$step': {
      id: '/install/$step';
      path: '/$step';
      fullPath: '/install/$step';
      preLoaderRoute: typeof InstallStepRouteImport;
      parentRoute: typeof InstallRouteRoute;
    };
    '/_auth/login': {
      id: '/_auth/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof AuthLoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_layout/web': {
      id: '/_layout/web';
      path: '/web';
      fullPath: '/web';
      preLoaderRoute: typeof LayoutWebRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_layout/web/': {
      id: '/_layout/web/';
      path: '/';
      fullPath: '/web/';
      preLoaderRoute: typeof LayoutWebIndexRouteImport;
      parentRoute: typeof LayoutWebRouteRoute;
    };
    '/_layout/web/$not-found': {
      id: '/_layout/web/$not-found';
      path: '/$not-found';
      fullPath: '/web/$not-found';
      preLoaderRoute: typeof LayoutWebNotFoundRouteImport;
      parentRoute: typeof LayoutWebRouteRoute;
    };
    '/_layout/web/route2': {
      id: '/_layout/web/route2';
      path: '/route2';
      fullPath: '/web/route2';
      preLoaderRoute: typeof LayoutWebRoute2RouteRouteImport;
      parentRoute: typeof LayoutWebRouteRoute;
    };
    '/_layout/web/route1': {
      id: '/_layout/web/route1';
      path: '/route1';
      fullPath: '/web/route1';
      preLoaderRoute: typeof LayoutWebRoute1RouteRouteImport;
      parentRoute: typeof LayoutWebRouteRoute;
    };
  }
}

interface InstallRouteRouteChildren {
  InstallStepRoute: typeof InstallStepRoute;
  InstallIndexRoute: typeof InstallIndexRoute;
}

const InstallRouteRouteChildren: InstallRouteRouteChildren = {
  InstallStepRoute: InstallStepRoute,
  InstallIndexRoute: InstallIndexRoute,
};

const InstallRouteRouteWithChildren = InstallRouteRoute._addFileChildren(
  InstallRouteRouteChildren,
);

interface LayoutWebRouteRouteChildren {
  LayoutWebRoute1RouteRoute: typeof LayoutWebRoute1RouteRoute;
  LayoutWebRoute2RouteRoute: typeof LayoutWebRoute2RouteRoute;
  LayoutWebNotFoundRoute: typeof LayoutWebNotFoundRoute;
  LayoutWebIndexRoute: typeof LayoutWebIndexRoute;
}

const LayoutWebRouteRouteChildren: LayoutWebRouteRouteChildren = {
  LayoutWebRoute1RouteRoute: LayoutWebRoute1RouteRoute,
  LayoutWebRoute2RouteRoute: LayoutWebRoute2RouteRoute,
  LayoutWebNotFoundRoute: LayoutWebNotFoundRoute,
  LayoutWebIndexRoute: LayoutWebIndexRoute,
};

const LayoutWebRouteRouteWithChildren = LayoutWebRouteRoute._addFileChildren(
  LayoutWebRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InstallRouteRoute: InstallRouteRouteWithChildren,
  RedirectRoute: RedirectRoute,
  LayoutWebRouteRoute: LayoutWebRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
